#version 460
#extension GL_EXT_debug_printf : enable

layout (binding = 0) uniform sampler2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

#define PI 3.1415926535897932384626433832795

const float TWO_PI = PI * 2.0;
const float HALF_PI = PI * 0.5;
const float deltaPhi = 0.025;
const float deltaTheta = 0.025;

const vec2 invATan = vec2(0.1591, 0.3183);

vec2 sample_spherical_map(vec3 v) {
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invATan;
    uv += 0.5;
    return uv;
}

// layout (local_size_x = 16, local_size_y = 16) in; // ?

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy); // gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID
    ivec2 inSize = textureSize(inputImage, 0);
    ivec2 outSize = imageSize(outputImage);

    vec2 inUV = vec2(coord) / outSize;
    // ivec2 outUV = ivec2(coord) / outSize;

    vec3 pixel = texture(inputImage, inUV).rgb; // vec3 pixel = imageLoad(inputImage, coord).rgb;

    // debugPrintfEXT("rgb: %f %f %f ", pixel[0], pixel[1], pixel[2]);

    vec3 N = normalize(vec3(inUV, 0.0));
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = cross(N, right);

    uint sampleCount = 0u;
    vec3 irradiance = vec3(0.0);
    for (float phi = 0.0; phi < TWO_PI; phi += deltaPhi) {
        float sinPhi = sin(phi);
        float cosPhi =  cos(phi);

        for (float theta = 0.0; theta < HALF_PI; theta += deltaTheta) {
            float sinTheta = sin(theta);
            float cosTheta =  cos(theta);

            vec3 tempVec = vec3(sinTheta * cosPhi,  sinTheta * sinPhi, cosTheta);
            vec3 sampleVector = tempVec.x * right + tempVec.y * up + tempVec.z * N;
//
////            vec3 tempVec = cosPhi * right + sinPhi * up;
////            vec3 sampleVector = cosTheta * N + sinTheta * tempVec;
            vec2 sampleCoord = vec2(sampleVector);
//
            irradiance += texture(inputImage, sampleCoord).rgb * cosTheta * sinTheta;
            sampleCount++;
        }
    }
    irradiance *= PI / float(sampleCount);

    // vec3 outColor = vec3(PI * irradiance / float(sampleCount));

    imageStore(outputImage, coord, vec4(irradiance, 1.0)); // pixel
}