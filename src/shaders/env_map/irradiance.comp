#version 460

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba16f) uniform writeonly image2D outputImage;

#define PI 3.1415926535897932384626433832795

const float TWO_PI = PI * 2.0;
const float HALF_PI = PI * 0.5;
const float deltaPhi = 0.025;
const float deltaTheta = 0.025;

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec3 pixel = imageLoad(inputImage, pos).rgb;

    vec3 N = normalize(vec3(pos, 0.0));
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = cross(N, right);


    vec3 irradiance = vec3(0.0);
    uint sampleCount = 0u;

    for (float phi = 0.0; phi < TWO_PI; phi += deltaPhi) {
        float sinPhi = sin(phi);
        float cosPhi =  cos(phi);

        for (float theta = 0.0; theta < HALF_PI; theta += deltaTheta) {
            float sinTheta = sin(theta);
            float cosTheta =  cos(theta);

            vec3 tempVec = cosPhi * right + sinPhi * up;
            vec3 sampleVector = cosTheta * N + sinTheta * tempVec;

            irradiance += pixel * cosTheta * sinTheta;
            sampleCount++;
        }
    }
    vec3 outColor = vec3(PI * irradiance / float(sampleCount));

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(outColor, 1.0));
}